const personGenerator = {
    surnameJson: `{  
        "count": 16,
        "list": {
            "id_1": "Иванов",
            "id_2": "Смирнов",
            "id_3": "Кузнецов",
            "id_4": "Васильев",
            "id_5": "Петров",
            "id_6": "Михайлов",
            "id_7": "Новиков",
            "id_8": "Федоров",
            "id_9": "Кравцов",
            "id_10": "Николаев",
            "id_11": "Семёнов",
            "id_12": "Славин",
            "id_13": "Степанов",
            "id_14": "Павлов",
            "id_15": "Александров",
            "id_16": "Морозов"
        }
    }`,
    firstNameMaleJson: `{
        "count": 10,
        "list": {     
            "id_1": "Александр",
            "id_2": "Максим",
            "id_3": "Иван",
            "id_4": "Артем",
            "id_5": "Дмитрий",
            "id_6": "Никита",
            "id_7": "Михаил",
            "id_8": "Даниил",
            "id_9": "Егор",
            "id_10": "Андрей"
        }
    }`,
    firstNameFemaleJson: `{
        "count": 10,
        "list": {     
            "id_1": "Александра",
            "id_2": "Марина",
            "id_3": "Инна",
            "id_4": "Анастасия",
            "id_5": "Дарья",
            "id_6": "Надежда",
            "id_7": "Мария",
            "id_8": "Диана",
            "id_9": "Екатерина",
            "id_10": "Анна"
        }
    }`,
    professionMaleJson: `{
        "count": 10,
        "list": {     
            "id_1": "Начальник",
            "id_2": "Коммерсант",
            "id_3": "Водитель",
            "id_4": "Слесарь",
            "id_5": "Токарь",
            "id_6": "Каменщик",
            "id_7": "Грузчик",
            "id_8": "Военнослужащий",
            "id_9": "Сварщик",
            "id_10": "Электрик"
        }
    }`,
    professionFemaleJson: `{
        "count": 10,
        "list": {     
            "id_1": "Учитель",
            "id_2": "Бухгалтер",
            "id_3": "Уборщица",
            "id_4": "Ученый",
            "id_5": "Библиотекарь",
            "id_6": "Швея",
            "id_7": "Продавец",
            "id_8": "Диспетчер",
            "id_9": "Секретарь",
            "id_10": "Оператор ЭВМ"            
        }
    }`,

    GENDER_MALE: 'Мужчина',
    GENDER_FEMALE: 'Женщина',

    randomIntNumber: (max = 1, min = 0) => Math.floor(Math.random() * (max - min + 1) + min),

    randomValue: function (json) {
        const obj = JSON.parse(json);
        const prop = `id_${this.randomIntNumber(obj.count, 1)}`;  // this = personGenerator
        return obj.list[prop];
    },

    randomFirstName: function () {
        if (this.person.gender === 'Мужчина') {
            return this.randomValue(this.firstNameMaleJson);
        } else {
            return this.randomValue(this.firstNameFemaleJson);
        };
    },


    randomSurname: function () {
        if (this.person.gender === 'Мужчина') {
            return this.randomValue(this.surnameJson);
        } else {
            return this.randomValue(this.surnameJson) + 'а';
        };
    },

    // Отчества от мужских имен (русских и нерусских) в русском языке образуются по следующим правилам:
    //  1. Если имя оканчивается на твёрдый согласный (кроме ж, ш, ч, щ, ц), добавляется -ович / овна: Александр + ович/овна, Иван + ович/овна, Гамзат + ович/овна.
    //  2. К именам, оканчивающимся на ж, ш, ч, щ, ц, добавляется -евич / евна : Жорж + евич/евна, Януш + евич/евна, Милич + евич/евна, Франц + евич/евна.
    //  3. Если имя оканчивается на неударный гласный а, у, ы, к нему добавляется -ович / овна, причём конечные гласные имени отбрасываются: Антипа - Антипович/Антиповна, Вавила - Вавилович/ Вавиловна.
    //      Исключение: от русских имён Аникита, Никита, Мина, Савва, Сила, Фока образуются традиционные формы отчеств на -ич / ична: Никита - Никитич/ Никитична, Мина - Минич/Минична, Савва — Саввич/Саввична.
    //  4. Если имя оканчивается на неударный гласный о, к нему добавляется -ович / овна, причём конечный гласный имени и начальный суффикса сливаются в один звук [о]: Василько + ович/овна, Михайло + ович/овна, Отто + ович/овна.
    //  5. Если неударному конечному гласному предшествует ж или ш, ч, щ, ц, то добавляется -евич / евна, а гласный отбрасывается: Важа - Важевич/Важевна, Гоча - Гочевич/Гочевна.
    //  6. Если имя оканчивается на мягкий согласный, т. е. на согласный + ь, к нему добавляется -евич / евна, а конечный ь отбрасывается: Игорь - Игоревич/Игоревна, Цезарь - Цезаревич/Цезаревна, Виль - Вилевич/Вилевна, Камиль — Камилевич/Камилевна.
    //  7. Если имя оканчивается на неударный гласный е, к нему добавляется -евич / евна, причём конечный гласный имени и начальный суффикса сливаются: Аарне - Аарневич/Аарневна, Григоре - Григоревич/Григоревна, Вилье — Вильевич/Вильевна.
    //  8. Если имя оканчивается на неударный гласный и, к нему добавляется -евич / евна, при этом конечный гласный сохраняется: Вилли - Виллиевич/Виллиевна, Илмари - Илмариевич/Илмариевна.
    //  9. Если имя оканчивается на неударное сочетание ий, к нему добавляется -евич / евна, причём конечный й отбрасывается, а предпоследний и либо переходит в ь, либо остаётся:
    //       а) переходит в ь после одного согласного или группы нт: Василий - Васильевич/Васильевна, Марий - Марьевич/Марьевна, Юлий — Юльевич/Юльевна.
    //       б) остаётся после к, х, ц, а также после двух согласных (кроме группы нт ): Никий - Никиевич/Никиевна, Люций - Люциевич/ Люциевна, Стахий — Стахиевич/Стахиевна.
    //  10. Старые русские имена, оканчивающиеся на сочетания ея и ия , образуют отчества прибавлением -евич / евна, при этом конечное я отбрасывается, а и или е сохраняется: Менея - Менеевич/ Менеевна, Захария — Захариевич/Захариевна.
    //  11. К именам, оканчивающимся на ударные гласные а, я, е, э, и, ы, ё, о, у, ю, добавляется -евич / евна, при этом конечный гласный сохраняется: Айбу - Айбуевич/Айбуевна, Бадма - Бадмаевич/Бадмаевна, Бату - Бутуевич/Батуевна, Вали - Валиевич/Валиевна, Дакко - Даккоевич/Даккоевна, Исе — Исеевич/Исеевна.
    //  12. Имена, оканчивающиеся на ударные сочетания ай, яй, ей, эй, ий, ый, ой, уй, юй, образуют отчества прибавлением -евич / евна, причём конечный й отбрасывается: Акбай - Акбаевич/Акбаевна, Кий - Киевич/Киевна, Матвей — Матвеевич/Матвеевна.
    //  13. Имена, оканчивающиеся на два гласных аа, ау, еу, ээ, ии, уу сохраняют их, образуя отчества прибавлением -евич / евна: Бимбии - Бимбииевич/Бимбииевна, Бобоо-Бобооевич/Бобооевна,Бурбээ—Бурбээевич/Бурбээевна.

    randomPatronymic: function () {
        let patronymic = '';
        const name = this.randomValue(this.firstNameMaleJson);
        const genderEnding = (this.person.gender === "Мужчина") ? 2 : 3;

        const addEnding = (name, ending) => name + ending;
        const replaceEnding = (name, ending, regExp) => name.replace(regExp, ending);

        // Реализовано 3 правила
        // Храним шаблон для сопоставления с именем
        // Функцию которая знает как обрабатывать данный случай
        // Пара окончаний для муж/жен рода
        const endings = [
            [/[бвгдзклмнпрстфх]$/, addEnding, 'ович', 'овна'], //[Александр] + [ович|овна] (Александр, Максим, Иван, Артем, Михаил, Даниил, Егор)
            [/й$/, replaceEnding, 'евич', 'евна'], //Дмитри[-й] + [евич|евна] (Дмитрий, Андрей)
            [/[ауы]$/, replaceEnding, 'ич', 'ична'], //Никит[-а] + [ич|ична] (Никита)
        ];

        // В цикле перебираем правила на педмет совпадением с именем
        for (let i = 0; i < endings.length; i++) {
            if (endings[i][0].test(name)) {    //name.match(endings[i][0]) - можно, но кажется излишним
                let ending = endings[i][genderEnding]; // индекс 2 или 3
                let regExp = endings[i][0];
                patronymic = endings[i][1](name, ending, regExp);
                break; // Обрываем цикл при совпадении, вруг правил станет много
            };
        }

        // Вернем сгенерированное от имени отчество если хотя бы одно праило сработало или ""
        return patronymic;
    },

    randomProfession: function () {
        if (this.person.gender === 'Мужчина') {
            return this.randomValue(this.professionMaleJson);
        } else {
            return this.randomValue(this.professionFemaleJson);
        };
    },

    randomGender: function () {
        // Случайное число 0-1
        return (this.randomIntNumber()) ? this.GENDER_MALE : this.GENDER_FEMALE;
    },

    randomBirthYear: function () {
        // Получаем случайный год, уточняем обычный или високосный
        const year = this.randomIntNumber(2023, 1940);
        const leapYear = ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) ? true : false;
        // Получаем случайный месяц
        const arrMonth = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];
        const numberManth = this.randomIntNumber(arrMonth.length - 1, 0);
        // const numberManth = Math.floor(Math.random() * (arrMonth.length)); // length - 12, random от 0-11
        const month = arrMonth[numberManth];
        // Получаем случайное число месяца, с ограничением числа по количеству дней в месяце и коррекцией февраля (28/29 дней)
        let arrDayPerMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        arrDayPerMonth[1] = (leapYear && numberManth === 1) ? arrDayPerMonth[1] + 1 : arrDayPerMonth[1];
        const number = this.randomIntNumber(arrDayPerMonth[numberManth], 1);
        // const number = Math.floor(Math.random() * arrDayPerMonth[numberManth] + 1);
        // Возвращаем строку с датой
        return `${number} ${month} ${year}`;
    },

    // Собираем персону в единое целое
    getPerson: function () {
        this.person = {};
        this.person.gender = this.randomGender();
        this.person.firstName = this.randomFirstName();
        this.person.surname = this.randomSurname();
        this.person.birthYear = this.randomBirthYear();
        this.person.patronymic = this.randomPatronymic();
        this.person.profession = this.randomProfession();
        return this.person;
    },
};
